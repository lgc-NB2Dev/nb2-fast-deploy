# 如果你不知道改了有什么用，那么请勿修改此项
ENVIRONMENT=prod


### 用户配置项 ###
# 各种插件的配置项可以放这里

VAR1=True  # 这是一条示例配置项，可以删掉
VAR2=False # 这也是一条示例配置项，也可以删掉


### 常用配置项 ###

# 机器人超级用户
# 超级用户拥有对 Bot 的最高权限
SUPERUSERS=["1234567890", "987654321"]

# 机器人的昵称
# 消息中包含机器人昵称可以代替艾特
NICKNAME=["awesome", "bot"]

# 命令起始字符
# 一般只有 on_command 匹配规则适用
# 如果有一个指令为 查询，当该配置项为 ["/"] 时使用 /查询 才能够触发
# 像下面这样配置则是 查询 和 /查询 都能够触发
COMMAND_START=["", "/"]

# 命令分割字符
# 一般用于二级指令（不常见）
COMMAND_SEP=["."]


### 不常用配置项 ###

# NoneBot2 运行所使用的驱动器
#
# 主要分为 ForwardDriver（客户端）和 ReverseDriver（服务端）两类
#
# 配置格式采用特殊语法：<module>[:<Driver>][+<module>[:<Mixin>]]*
# 其中 <module> 为驱动器模块名，可以使用 ~ 作为 nonebot.drivers. 的简写；
# <Driver> 为驱动器类名，默认为 Driver；
# <Mixin> 为驱动器混入的类名，默认为 Mixin
#
# DRIVER=~fastapi  # ReverseDriver（一般用于 ws 反向连接、http反向上报 等，默认值）
# DRIVER=~aiohttp  # ForwardDriver（一般用于 ws 正向连接、http轮询 等）
# DRIVER=~aiohttp+~fastapi  # ForwardDriver + ReverseDriver

# NoneBot2 日志输出等级
# LOG_LEVEL=INFO

# API 请求超时时间，单位为秒
# API_TIMEOUT=30.0

# 用户会话超时时间
# SESSION_EXPIRE_TIMEOUT=120


### 适配器配置项 ###

## OneBot V11 配置项

# 配置 OneBot 实现的 ws server 相关配置，开启 WebSocket 服务器监听。
# 其中，127.0.0.1 和 6700 分别对应 OneBot 实现配置的 WebSocket 服务器的 HOST 和 PORT。
# 请确保你的 NoneBot 使用的是 ForwardDriver，否则无法使用此连接方式。
#
# ONEBOT_WS_URLS=["ws://127.0.0.1:6700"]


## OneBot V12 配置项

# 配置 OneBot 实现的 http webhook 相关配置
# 其中，127.0.0.1 和 5700 分别对应 OneBot 实现配置的 HTTP 服务器监听的 HOST 和 PORT。 
# 请确保你的 NoneBot 使用的是 ForwardDriver 和 ReverseDriver，否则无法使用此连接方式。
#
# ONEBOT_V12_API_ROOTS={"Bot QQ号": "http://127.0.0.1:5700/"}

# 配置 OneBot 实现的 ws server 相关配置，开启 WebSocket 服务器监听。
# 配置 NoneBot 配置，提供机器人的 WebSocket 地址：
# 其中，127.0.0.1 和 6700 分别对应 OneBot 实现配置的 WebSocket 服务器的 HOST 和 PORT。
# 请确保你的 NoneBot 使用的是 ForwardDriver，否则无法使用此连接方式。
#
# ONEBOT_V12_WS_URLS=["ws://127.0.0.1:6700"]


###            注意！下面的多行配置项可能不会被正确解析             ###
### 如果出现 could not parse env 字样的报错，请尝试将配置项缩成一行 ###


## 钉钉配置项

# ding_access_token=xxx  # 钉钉令牌
# ding_secret=xxx        # 钉钉 HTTP 上报数据签名口令


## 飞书配置项

# 飞书国内版开放平台 API Endpoint
# feishu_api_base=xxx

# 飞书海外版（lark）开放平台 API Endpoint
# feishu_lark_api_base=xxx

# 飞书适配器 Bot 配置列表
# feishu_bots="[
#     {
#         "app_id": "xxx",              # 飞书开放平台后台“凭证与基础信息”处给出的 App ID
#         "app_secret": "xxx",          # 飞书开放平台后台“凭证与基础信息”处给出的 App Secret
#         "encrypt_key": null,          # 飞书开放平台后台“事件订阅”处设置的 Encrypt Key
#         "verification_token": "xxx",  # 飞书开放平台后台“事件订阅”处设置的 Verification Token
#         "is_lark": false              # 是否使用 Lark（飞书海外版），默认为 false
#     }
# ]"


## Telegram 配置项

# 自定义代理
# proxy="http://127.0.0.1:7890"

# 机器人单独配置 
# telegram_bots="[
#     {
#         "token": "xxx",            # telegram bot token
#         "webhook_url": null,       # WebHook 域名
#         "polling_interval": null,  # 拉取消息的间隔时间
#         "api_server": null         # 自定义 API 服务器
#     }
# ]"


## QQ 频道 配置项

# qqguild_is_sandbox=False
# qqguild_api_base="https://api.sgroup.qq.com/"
# qqguild_sandbox_api_base="https://sandbox.api.sgroup.qq.com"
# qqguild_bots="[
#     {
#         "id": "xxx",
#         "token": "xxx",
#         "secret": "xxx",
#         "shard": [0, 0],
#         "intent": {
#             "guilds": true,
#             "guild_members": true,
#             "guild_messages": false,
#             "guild_message_reactions": true,
#             "direct_message": false,
#             "message_audit": false,
#             "forum_event": false,
#             "audio_action": false,
#             "at_messages": true
#         }
#     }
# ]"


## 开黑啦 配置项

# 是否开启压缩, 默认为 False
# compress=False

# Bot Token列表
#
# kaiheila_bots="[
#     {
#         "token": "xxx"  # Kaiheila 开发者中心获得
#     }
# ]"


## Mirai 配置项

# mirai-api-http 的 verify_key
# mirai_verify_key=xxx

# mirai-api-http 的地址
# mirai_host=xxx

# mirai-api-http 的端口
# mirai_port=8080

# mirai-api-http qq 列表
# mirai_qq=[123456789, 987654321]


## Console 配置项

# nickname=TestBot
# user_id=xxx
# color=blue


## Github 配置项

# github_base_url=xxx
# github_accept_format=xxx
# github_previews=["xxx", "xxx"]

# Allowed GitHub App List
# github_apps="[
#     # OAuth
#     {
#         "client_id": "xxx",
#         "client_secret": "xxx",
#         "webhook_secret": "xxx"
#     },
#     # App
#     {
#         "app_id": "xxx",
#         "private_key": "xxx",
#         "client_id": "xxx",
#         "client_secret": "xxx",
#         "webhook_secret": "xxx"
#     }
# ]"


# NtChat 配置项

# access_token=xxx  # 令牌口令
# ntchat_http_api_root=xxx  # http api请求地址


### 驱动器配置项 ###

## FastAPI 配置项
# 当使用FastAPI驱动器时配置才会生效

# FastAPI 提供的 OpenAPI JSON 定义地址，如果为 None，则不提供 OpenAPI JSON 定义。
# fastapi_openapi_url=""

# FastAPI 提供的 Swagger 文档地址，如果为 None，则不提供 Swagger 文档。
# fastapi_docs_url=""

# FastAPI 提供的 ReDoc 文档地址，如果为 None，则不提供 ReDoc 文档。
# fastapi_redoc_url=""

# FastAPI 提供的 OpenAPI JSON 定义中是否包含适配器路由的 Schema。
# fastapi_include_adapter_schema=True

# 是否开启 uvicorn 的 自动重载 功能，需要提供 asgi 应用路径。
#
# 在 Windows 平台上开启该功能有可能会造成预料之外的影响！
# 一些使用了 asyncio 的库因此可能无法正常工作，如：playwright
# 如果在开启该功能后，原本正常运行的代码报错，且打印的异常堆栈信息和 asyncio 有关（异常一般为 NotImplementedError）
# 你可能就需要考虑相关库对事件循环的支持，以及是否启用该功能
#
fastapi_reload=False

# 重载监控文件夹列表，默认为 uvicorn 默认值
# fastapi_reload_dirs=[""]

# 重载延迟，默认为 uvicorn 默认值
# fastapi_reload_delay=None

# 要监听的文件列表，支持 glob pattern，默认为 uvicorn 默认值
# fastapi_reload_includes=[""]

# 不要监听的文件列表，支持 glob pattern，默认为 uvicorn 默认值
# fastapi_reload_excludes=[""]


## Quart 配置项

# 是否开启 uvicorn 的 reload 功能，需要提供 asgi 应用路径。
# quart_reload=False

# 重载监控文件夹列表，默认为 uvicorn 默认值
# quart_reload_dirs=[""]

# 重载延迟，默认为 uvicorn 默认值
# quart_reload_delay=None

# 要监听的文件列表，支持 glob pattern，默认为 uvicorn 默认值
# quart_reload_includes=[""]

# 不要监听的文件列表，支持 glob pattern，默认为 uvicorn 默认值
# quart_reload_excludes=[""]
